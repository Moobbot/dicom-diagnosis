import * as fs from "fs";
import * as path from "path";
import { convertDicomToPng } from "./dicomToPng"; // Chuy·ªÉn DICOM sang PNG
import { validateEnv } from "../config/env.config";
import createReport from "docx-templates";

// ƒê∆∞·ªùng d·∫´n file template DOCX
const TEMPLATE_PATH = path.join(validateEnv().linkTemplateReport, "report-hospital.docx");


/**
 * ƒêi·ªÅn d·ªØ li·ªáu v√†o m·∫´u DOCX
 */
interface DataForm {
    patient_id: string;
    name: string;
    group: string;
    collectFees: string;
    age: string;
    sex: string;
    address: string;
    diagnosis: string;
    general_conclusion: string;
    session_id?: string;
    file_name: string[];
    forecast: number[];
}

/**
 * H√†m ƒëi·ªÅn d·ªØ li·ªáu v√†o file DOCX v√† xu·∫•t file b√°o c√°o
 */
export async function fillTemplate({
    dicomPath,
    dataForm
}: {
    dicomPath: string;
    dataForm: DataForm;
}): Promise<void> {
    try {
        // T·∫°o session_id n·∫øu ch∆∞a c√≥
        const session_id = dataForm.session_id ?? Date.now().toString();

        // T·∫°o th∆∞ m·ª•c l∆∞u report n·∫øu ch∆∞a c√≥
        const reportFolder = path.join(validateEnv().linkSaveReport, session_id);

        if (!fs.existsSync(reportFolder)) fs.mkdirSync(reportFolder, { recursive: true });

        const OUTPUT_DOCX_PATH = path.join(reportFolder, "report.docx");

        // 1Ô∏è‚É£ Chuy·ªÉn ƒë·ªïi ·∫£nh DICOM sang PNG
        const pngPath = path.join(reportFolder, "dicom-image.png");
        await convertDicomToPng(dicomPath, pngPath);

        // Ki·ªÉm tra l·∫°i k√≠ch th∆∞·ªõc file PNG
        let retryCount = 0;
        while (!fs.existsSync(pngPath) || fs.statSync(pngPath).size === 0) {
            if (retryCount > 5) throw new Error("‚ùå L·ªói: File PNG kh√¥ng ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
            console.log("üîÑ ƒê·ª£i file PNG ƒë∆∞·ª£c t·∫°o...");
            await new Promise((resolve) => setTimeout(resolve, 500)); // ƒê·ª£i 500ms
            retryCount++;
        }

        // 2Ô∏è‚É£ ƒê·ªçc file template DOCX
        const templateBuffer = fs.readFileSync(TEMPLATE_PATH);
        // 5Ô∏è‚É£ T·∫°o d·ªØ li·ªáu thay th·∫ø

        const f_id = {
            id_0: dataForm.forecast[0] ? `${(dataForm.forecast[0] * 100).toFixed(2)}%` : "N/A",
            id_1: dataForm.forecast[1] ? `${(dataForm.forecast[1] * 100).toFixed(2)}%` : "N/A",
            id_2: dataForm.forecast[2] ? `${(dataForm.forecast[2] * 100).toFixed(2)}%` : "N/A",
            id_3: dataForm.forecast[3] ? `${(dataForm.forecast[3] * 100).toFixed(2)}%` : "N/A",
            id_4: dataForm.forecast[4] ? `${(dataForm.forecast[4] * 100).toFixed(2)}%` : "N/A",
            id_5: dataForm.forecast[5] ? `${(dataForm.forecast[5] * 100).toFixed(2)}%` : "N/A",
        };

        // 3Ô∏è‚É£ T·∫°o d·ªØ li·ªáu thay th·∫ø
        const data = {
            patient_id: dataForm.patient_id,
            name: dataForm.name,
            group: dataForm.group,
            collectFees: dataForm.collectFees,
            age: dataForm.age,
            sex: dataForm.sex,
            address: dataForm.address,
            diagnosis: dataForm.diagnosis,
            general_conclusion: dataForm.general_conclusion,
            ...f_id,
            images_predict: {
                width: 6, // cm
                height: 4, // cm
                data: await fs.promises.readFile(pngPath, "base64"), // Ch·ªâ l·∫•y Base64, kh√¥ng c√≥ ti·ªÅn t·ªë 'data:image/png;base64,'
                extension: ".png",
            },
        };

        // 4Ô∏è‚É£ T·∫°o file DOCX t·ª´ template
        const buffer = await createReport({
            template: templateBuffer,
            data,
            cmdDelimiter: ["{", "}"], // ƒê·∫£m b·∫£o s·ª≠ d·ª•ng ƒë√∫ng `{}` l√†m k√Ω t·ª± ƒë·ªãnh d·∫°ng
        });

        // 5Ô∏è‚É£ L∆∞u file DOCX m·ªõi
        fs.writeFileSync(OUTPUT_DOCX_PATH, buffer);
        console.log(`‚úÖ File b√°o c√°o ƒë√£ ƒë∆∞·ª£c t·∫°o: ${OUTPUT_DOCX_PATH}`);
    } catch (error) {
        console.error("‚ùå L·ªói khi t·∫°o b√°o c√°o:", error);
    }
}