import AuthService from '@/modules/admin/service/AuthService';
import { deleteCookie, getCookie } from 'cookies-next';

// ‚úÖ **H√†m x√≥a to√†n b·ªô d·ªØ li·ªáu tr√™n client**
const clearClientStorage = () => {
    console.log('üóë Clearing all authentication data...');

    // X√≥a cookies t·ª´ ph√≠a client (ch·ªâ √°p d·ª•ng v·ªõi non-HttpOnly cookies)
    ['accessToken', 'refreshToken', 'permissions', 'grantAll'].forEach((cookie) => deleteCookie(cookie));

    // X√≥a LocalStorage & SessionStorage
    localStorage.clear();
    sessionStorage.clear();
};

const getAuthHeaders = () => {
    const token = getCookie('token'); // üîÑ ƒê·∫£m b·∫£o t√™n token ƒë√∫ng

    if (!token) {
        console.warn('‚ö† No token found in Cookie. Skipping authentication headers.');
        return null; // ‚úÖ Tr·∫£ v·ªÅ `null` thay v√¨ throw error
    }

    return {
        Authorization: `Bearer ${token}`
    };
};

export const login = async (username: string, password: string) => {
    // G·ªçi login t·ª´ AuthService
    const response_data = await AuthService.login(username, password);
    return response_data;
};

export const logout = async (refreshToken: string) => {
    try {
        // 1Ô∏è‚É£ G·ªçi API logout t·ª´ backend
        const response = await AuthService.logout(refreshToken);
    } catch (error) {
        console.error('üö® Error during logout:', error);
        clearClientStorage();

        setTimeout(() => {
            window.location.replace('/auth/login');
        }, 3000); // 3000ms = 3 gi√¢y
    }
};
